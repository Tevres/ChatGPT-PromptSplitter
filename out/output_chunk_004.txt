 that ends with 'd\n'.  [^…] 	Matches every character except the ones inside brackets. 	  $string1 = "Hello World\n"; if ($string1 =~ m/[^abc]/) {   print "$string1 contains a character other than ";   print "a, b, and c.\n"; }  Output:  Hello World  contains a character other than a, b, and c.  Induction Main article: Induction of regular languages  Regular expressions can often be created ("induced" or "learned") based on a set of example strings. This is known as the induction of regular languages and is part of the general problem of grammar induction in computational learning theory. Formally, given examples of strings in a regular language, and perhaps also given examples of strings not in that regular language, it is possible to induce a grammar for the language, i.e., a regular expression that generates that language. Not all regular languages can be induced in this way (see language identification in the limit), but many can. For example, the set of examples {1, 10, 100}, and negative set (of counterexamples) {11, 1001, 101, 0} can be used to induce the regular expression 1⋅0* (1 followed by zero or more 0s). See also      Comparison of regular expression engines     Extended Backus–Naur form     Matching wildcards     Regular tree grammar     Thompson's construction – converts a regular expression into an equivalent nondeterministic finite automaton (NFA)  Notes  Goyvaerts, Jan. "Regular Expression Tutorial - Learn How to Use Regular Expressions". Regular-Expressions.info. Archived from the original on 2016-11-01. Retrieved 2016-10-31. Mitkov, Ruslan (2003). The Oxford Handbook of Computational Linguistics. Oxford University Press. p. 754. ISBN 978-0-19-927634-9. Archived from the original on 2017-02-28. Retrieved 2016-07-25. Lawson, Mark V. (17 September 2003). Finite Automata. CRC Press. pp. 98–100. ISBN 978-1-58488-255-8. Archived from the original on 27 February 2017. Retrieved 25 July 2016. "How a Regex Engine Works Internally". regular-expressions.info. Retrieved 24 February 2024. Heddings, Anthony (11 March 2020). "How Do You Actually Use Regex?". howtogeek.com. Retrieved 24 February 2024. Kleene 1951. Leung, Hing (16 September 2010). "Regular Languages and Finite Automata" (PDF). New Mexico State University. Archived from the original (PDF) on 5 December 2013. Retrieved 13 August 2019. "The concept of regular events was introduced by Kleene via the definition of regular expressions." Kleene 1951, pg46 Thompson 1968. Johnson et al. 1968. Kernighan, Brian (2007-08-08). "A Regular Expressions Matcher". Beautiful Code. O'Reilly Media. pp. 1–2. ISBN 978-0-596-51004-6. Archived from the original on 2020-10-07. Retrieved 2013-05-15. Ritchie, Dennis M. "An incomplete history of the QED Text Editor". Archived from the original on 1999-02-21. Retrieved 9 October 2013. Aho & Ullman 1992, 10.11 Bibliographic Notes for Chapter 10, p. 589. Aycock 2003, p. 98. Raymond, Eric S. citing Dennis Ritchie (2003). "Jargon File 4.4.7: grep". Archived from the original on 2011-06-05. Retrieved 2009-02-17. "New Regular Expression Features in Tcl 8.1". Archived from the original on 2020-10-07. Retrieved 2013-10-11. "Documentation: 9.3: Pattern Matching". PostgreSQL. Archived from the original on 2020-10-07. Retrieved 2013-10-12. Wall, Larry (2006). "Perl Regular Expressions". perlre. Archived from the original on 2009-12-31. Retrieved 2006-10-10. Wall (2002) "PCRE - Perl Compatible Regular Expressions". www.pcre.org. Retrieved 2024-04-07. "GRegex – Faster Analytics for Unstructured Text Data". grovf.com. Archived from the original on 2020-10-07. Retrieved 2019-10-22. "CUDA grep". bkase.github.io. Archived from the original on 2020-10-07. Retrieved 2019-10-22. Kerrisk, Michael. "grep(1) - Linux manual page". man7.org. Retrieved 31 January 2023. Hopcroft, Motwani & Ullman (2000) Sipser (1998) Gelade & Neven (2008, p. 332, Thm.4.1) Gruber & Holzer (2008) Based on Gelade & Neven (2008), a regular expression of length about 850 such that its complement has a length about 232 can be found at File:RegexComplementBlowup.png. "Regular expressions for deciding divisibility". s3.boskent.com. Retrieved 2024-02-21. Gischer, Jay L. (1984). (Title unknown) (Technical Report). Stanford Univ., Dept. of Comp. Sc.[title missing] Hopcroft, John E.; Motwani, Rajeev & Ullman, Jeffrey D. (2003). Introduction to Automata Theory, Languages, and Computation. Upper Saddle River, New Jersey: Addison Wesley. pp. 117–120. ISBN 978-0-201-44124-6. "This property need not hold for extended regular expressions, even if they describe no larger class than regular languages; cf. p.121." Kozen (1991)[page needed] Redko, V.N. (1964). "On defining relations for the algebra of regular events". Ukrainskii Matematicheskii Zhurnal (in Russian). 16 (1): 120–126. Archived from the original on 2018-03-29. Retrieved 2018-03-28. ISO/IEC 9945-2:1993 Information technology – Portable Operating System Interface (POSIX) – Part 2: Shell and Utilities, successively revised as ISO/IEC 9945-2:2002 Information technology – Portable Operating System Interface (POSIX) – Part 2: System Interfaces, ISO/IEC 9945-2:2003, and currently ISO/IEC/IEEE 9945:2009 Information technology – Portable Operating System Interface (POSIX) Base Specifications, Issue 7 The Single Unix Specification (Version 2) "9.3.6 BREs Matching Multiple Characters". The Open Group Base Specifications Issue 7, 2018 edition. The Open Group. 2017. Retrieved December 10, 2023. Russ Cox (2009). "Regular Expression Matching: the Virtual Machine Approach". swtch.com. "Digression: POSIX Submatching" "Perl Regular Expression Documentation". perldoc.perl.org. Archived from the original on December 31, 2009. Retrieved November 5, 2024. "Regular Expression Syntax". Python 3.5.0 documentation. Python Software Foundation. Archived from the original on 18 July 2018. Retrieved 10 October 2015. SRE: Atomic Grouping (?>...) is not supported #34627 "Essential classes: Regular Expressions: Quantifiers: Differences Among Greedy, Reluctant, and Possessive Quantifiers". The Java Tutorials. Oracle. Archived from the original on 7 October 2020. Retrieved 23 December 2016. "Atomic Grouping". Regex Tutorial. Archived from the original on 7 October 2020. Retrieved 24 November 2019. Bormann, Carsten; Bray, Tim. I-Regexp: An Interoperable Regular Expression Format. Internet Engineering Task Force. doi:10.17487/RFC9485. RFC 9485. Retrieved 11 March 2024. Cezar Câmpeanu; Kai Salomaa & Sheng Yu (Dec 2003). "A Formal Study of Practical Regular Expressions". International Journal of Foundations of Computer Science. 14 (6): 1007–1018. doi:10.1142/S012905410300214X. Archived from the original on 2015-07-04. Retrieved 2015-07-03. Theorem 3 (p.9) "Perl Regular Expression Matching is NP-Hard". perl.plover.com. Archived from the original on 2020-10-07. Retrieved 2019-11-21. Ritchie, D. M.; Thompson, K. L. (June 1970). QED Text Editor (PDF). MM-70-1373-3. Archived from the original (PDF) on 2015-02-03. Retrieved 2022-09-05. Reprinted as "QED Text Editor Reference Manual", MHCC-004, Murray Hill Computing, Bell Laboratories (October 1972). Wall, Larry (1994-10-18). "Perl 5: perlre.pod". GitHub. Wandering Logic. "How to simulate lookaheads and lookbehinds in finite state automata?". Computer Science Stack Exchange. Archived from the original on 7 October 2020. Retrieved 24 November 2019. Zakharevich, Ilya (1997-11-19). "Jumbo Regexp Patch Applied (with Minor Fix-Up Tweaks): Perl/perl5@c277df4". GitHub. Cox (2007) Laurikari (2009) "gnulib/lib/dfa.c". Archived from the original on 2021-08-18. Retrieved 2022-02-12. "If the scanner detects a transition on backref, it returns a kind of "semi-success" indicating that the match will have to be verified with a backtracking matcher." Kearns, Steven (August 2013). "Sublinear Matching With Finite Automata Using Reverse Suffix Scanning". arXiv:1308.3822 [cs.DS]. Navarro, Gonzalo (10 November 2001). "NR-grep: a fast and flexible pattern-matching tool" (PDF). Software: Practice and Experience. 31 (13): 1265–1312. doi:10.1002/spe.411. S2CID 3175806. Archived (PDF) from the original on 7 October 2020. Retrieved 21 November 2019. "travisdowns/polyregex". GitHub. 5 July 2019. Archived from the original on 14 September 2020. Retrieved 21 November 2019. Schmid, Markus L. (March 2019). "Regular Expressions with Backreferences: Polynomial-Time Matching Techniques". arXiv:1903.05896 [cs.FL]. "Vim documentation: pattern". Vimdoc.sourceforge.net. Archived from the original on 2020-10-07. Retrieved 2013-09-25. "UTS#18 on Unicode Regular Expressions, Annex A: Character Blocks". Archived from the original on 2020-10-07. Retrieved 2010-02-05. Horowitz, Bradley (24 October 2011). "A fall sweep". Google Blog. Archived from the original on 21 October 2018. Retrieved 4 May 2019. The character 'm' is not always required to specify a Perl match operation. For example, m/[^abc]/ could also be rendered as /[^abc]/. The 'm' is only necessary if the user wishes to specify a match operation without using a forward-slash as the regex delimiter. Sometimes it is useful to specify an alternate regex delimiter in order to avoid "delimiter collision". See 'perldoc perlre Archived 2009-12-31 at the Wayback Machine' for more details. E.g., see Java in a Nutshell, p. 213; Python Scripting for Computational Science, p. 320; Programming PHP, p. 106. All the if statements return a TRUE value      Conway, Damian (2005). "Regular Expressions, End of String". Perl Best Practices. O'Reilly. p. 240. ISBN 978-0-596-00173-5. Archived from the original on 2020-10-07. Retrieved 2017-09-10.  References      Aho, Alfred V. (1990). "Algorithms for finding patterns in strings". In van Leeuwen, Jan (ed.). Handbook of Theoretical Computer Science, volume A: Algorithms and Complexity. The MIT Press. pp. 255–300.     Aho, Alfred V.; Ullman, Jeffrey D. (1992). "Chapter 10. Patterns, Automata, and Regular Expressions" (PDF). Foundations of Computer Science. Archived from the original on 2020-10-07. Retrieved 2013-12-14.     Aycock, John (June 2003). "A brief history of just-in-time" (PDF). ACM Computing Surveys. 35 (2): 97–113. CiteSeerX 10.1.1.97.3985. doi:10.1145/857076.857077. S2CID 15345671.     "Regular Expressions". The Single UNIX Specification, Version 2. The Open Group. 1997. Archived from the original on 2020-10-07. Retrieved 2011-12-13.     "Chapter 9: Regular Expressions". The Open Group Base Specifications (6). The Open Group. 2004. IEEE Std 1003.1, 2004 Edition. Archived from the original on 2011-12-02. Retrieved 2011-12-13.     Cox, Russ (2007). "Regular Expression Matching Can Be Simple and Fast". Archived from the original on 2010-01-01. Retrieved 2008-04-27.     Forta, Ben (2004). Sams Teach Yourself Regular Expressions in 10 Minutes. Sams. ISBN 978-0-672-32566-3.     Friedl, Jeffrey E. F. (2002). Mastering Regular Expressions. O'Reilly. ISBN 978-0-596-00289-3. Archived from the original on 2005-08-30. Retrieved 2005-04-26.     Gelade, Wouter; Neven, Frank (2008). Succinctness of the Complement and Intersection of Regular Expressions. Proceedings of the 25th International Symposium on Theoretical Aspects of Computer Science (STACS 2008). pp. 325–336. arXiv:0802.2869. Archived from the original on 2011-07-18. Retrieved 2009-06-15.     Goyvaerts, Jan; Levithan, Steven (2009). Regular Expressions Cookbook. [O'reilly]. ISBN 978-0-596-52068-7.     Gruber, Hermann; Holzer, Markus (2008). Finite Automata, Digraph Connectivity, and Regular Expression Size (PDF). Proceedings of the 35th International Colloquium on Automata, Languages and Programming (ICALP 2008). Lecture Notes in Computer Science. Vol. 5126. pp. 39–50. doi:10.1007/978-3-540-70583-3_4. ISBN 978-3-540-70582-6. Archived (PDF) from the original on 2011-07-11. Retrieved 2011-02-03.     Habibi, Mehran (2004). Real World Regular Expressions with Java 1.4. Springer. ISBN 978-1-59059-107-9.     Hopcroft, John E.; Motwani, Rajeev; Ullman, Jeffrey D. (2000). Introduction to Automata Theory, Languages, and Computation (2nd ed.). Addison-Wesley.     Johnson, Walter L.; Porter, James H.; Ackley, Stephanie I.; Ross, Douglas T. (1968). "Automatic generation of efficient lexical processors using finite state techniques". Communications of the ACM. 11 (12): 805–813. doi:10.1145/364175.364185. S2CID 17253809.     Kleene, Stephen C. (1951). "Representation of Events in Nerve Nets and Finite Automata". In Shannon, Claude E.; McCarthy, John (eds.). Automata Studies (PDF). Princeton University Press. pp. 3–42. Archived (PDF) from the original on 2020-10-07. Retrieved 2017-12-10.     Kozen, Dexter (1991). "A completeness theorem for Kleene algebras and the algebra of regular events". [1991] Proceedings Sixth Annual IEEE Symposium on Logic in Computer Science. pp. 214–225. doi:10.1109/LICS.1991.151646. hdl:1813/6963. ISBN 978-0-8186-2230-4. S2CID 19875225.     Laurikari, Ville (2009). "TRE library 0.7.6". Archived from the original on 2010-07-14. Retrieved 2009-04-01.     Liger, François; McQueen, Craig; Wilton, Paul (2002). Visual Basic .NET Text Manipulation Handbook. Wrox Press. ISBN 978-1-86100-730-8.     Sipser, Michael (1998). "Chapter 1: Regular Languages". Introduction to the Theory of Computation. PWS Publishing. pp. 31–90. ISBN 978-0-534-94728-6.     Stubblebine, Tony (2003). Regular Expression Pocket Reference. O'Reilly. ISBN 978-0-596-00415-6.     Thompson, Ken (1968). "Programming Techniques: Regular expression search algorithm". Communications of the ACM. 11 (6): 419–422. doi:10.1145/363347.363387. S2CID 21260384.     Wall, Larry (2002). "Apocalypse 5: Pattern Matching". Archived from the original on 2010-01-12. Retrieved 2006-10-11.  External links Wikibooks has a book on the topic of: Regular Expressions The Wikibook R Programming has a page on the topic of: Text Processing Look up regular expression in Wiktionary, the free dictionary.      Media related to Regex at Wikimedia Commons     ISO/IEC/IEEE 9945:2009 Information technology – Portable Operating System Interface (POSIX) Base Specifications, Issue 7     Regular Expressions, IEEE Std 1003.1-2024, Open Group     Open source list of regular expression resources      vte  Automata theory: formal languages and formal grammars 			  	  	  	      vte  Strings 	  	  	  	  	  	  	  Authority control databases Edit this at Wikidata 	  	  Categories:      Regular expressions1951 introductionsAutomata (computation)Formal languagesPattern matchingProgramming constructs      This page was last edited on 13 July 2025, at 03:40 (UTC).     Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.      Privacy policy     About Wikipedia     Disclaimers     Contact Wikipedia     Code of Conduct     Developers     Statistics     Cookie statement     Mobile view      Wikimedia Foundation     Powered by MediaWiki  